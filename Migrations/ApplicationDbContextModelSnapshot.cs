// <auto-generated />
using System;
using LinkshellManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LinkshellManager.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LinkshellManager.Models.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnnouncementDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnnouncementTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LinkshellId")
                        .HasColumnType("int");

                    b.Property<string>("LinkshellName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LinkshellId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("LinkshellManager.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CharacterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PrimaryLinkshellId")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryLinkshellName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LinkshellManager.Models.AppUserEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Duration")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<double?>("EventDkp")
                        .HasColumnType("float");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsOnBreak")
                        .HasColumnType("bit");

                    b.Property<bool>("IsQuickJoin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("JobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LinkshellId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PauseTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Proctor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResumeTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("SubJobName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("EventId");

                    b.HasIndex("LinkshellId");

                    b.ToTable("AppUserEvents");
                });

            modelBuilder.Entity("LinkshellManager.Models.AppUserEventHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Duration")
                        .HasColumnType("float");

                    b.Property<double?>("EventDkp")
                        .HasColumnType("float");

                    b.Property<int>("EventHistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsQuickJoin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("JobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Proctor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("SubJobName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("EventHistoryId");

                    b.ToTable("AppUserEventHistories");
                });

            modelBuilder.Entity("LinkshellManager.Models.AppUserJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("JobId");

                    b.ToTable("AppUserJobs");
                });

            modelBuilder.Entity("LinkshellManager.Models.AppUserLinkshell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<double?>("LinkshellDkp")
                        .HasColumnType("float");

                    b.Property<int>("LinkshellId")
                        .HasColumnType("int");

                    b.Property<string>("Rank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("LinkshellId");

                    b.ToTable("AppUserLinkshells");
                });

            modelBuilder.Entity("LinkshellManager.Models.AppUserMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterNameReceiver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CharacterNameSender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("MessageId");

                    b.ToTable("AppUserMessages");
                });

            modelBuilder.Entity("LinkshellManager.Models.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuctionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int>("LinkshellId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("LinkshellId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("LinkshellManager.Models.AuctionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuctionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int>("LinkshellId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("LinkshellId");

                    b.ToTable("AuctionHistories");
                });

            modelBuilder.Entity("LinkshellManager.Models.AuctionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuctionHistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("AuctionId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentHighestBid")
                        .HasColumnType("int");

                    b.Property<string>("CurrentHighestBidder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("EndingBidDkp")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("StartingBidDkp")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuctionHistoryId");

                    b.HasIndex("AuctionId");

                    b.ToTable("AuctionItems");
                });

            modelBuilder.Entity("LinkshellManager.Models.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuctionItemId")
                        .HasColumnType("int");

                    b.Property<int>("BidAmount")
                        .HasColumnType("int");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuctionItemId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("LinkshellManager.Models.DkpAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppUserLinkshellId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("NewDkp")
                        .HasColumnType("float");

                    b.Property<double?>("PreviousDkp")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AppUserLinkshellId");

                    b.ToTable("DkpAudits");
                });

            modelBuilder.Entity("LinkshellManager.Models.DkpLedger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppUserLinkshellId")
                        .HasColumnType("int");

                    b.Property<string>("DkpType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("NewDkp")
                        .HasColumnType("float");

                    b.Property<double?>("PreviousDkp")
                        .HasColumnType("float");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TransactionValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AppUserLinkshellId");

                    b.ToTable("DkpLedgers");
                });

            modelBuilder.Entity("LinkshellManager.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CommencementStartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DkpPerHour")
                        .HasColumnType("int");

                    b.Property<double?>("Duration")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<double?>("EventDkp")
                        .HasColumnType("float");

                    b.Property<string>("EventLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LinkshellId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("LinkshellId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("LinkshellManager.Models.EventHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CommencementStartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DkpPerHour")
                        .HasColumnType("int");

                    b.Property<double?>("Duration")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<double?>("EventDkp")
                        .HasColumnType("float");

                    b.Property<string>("EventLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LinkshellId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LinkshellId");

                    b.ToTable("EventHistories");
                });

            modelBuilder.Entity("LinkshellManager.Models.EventLootDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemWinner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WinningDkpSpent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventLootDetails");
                });

            modelBuilder.Entity("LinkshellManager.Models.Income", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LinkshellId")
                        .HasColumnType("int");

                    b.Property<string>("LinkshellName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MethodOfIncome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LinkshellId");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("LinkshellManager.Models.Invite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LinkshellId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("LinkshellId");

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("LinkshellManager.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LinkshellId")
                        .HasColumnType("int");

                    b.Property<string>("LinkshellName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LinkshellId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("LinkshellManager.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Enlisted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("JobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SignedUp")
                        .HasColumnType("int");

                    b.Property<string>("SubJobName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("LinkshellManager.Models.Linkshell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LinkshellCurrentDkp")
                        .HasColumnType("int");

                    b.Property<string>("LinkshellName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LinkshellTotalDkp")
                        .HasColumnType("int");

                    b.Property<int?>("Revenue")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalItems")
                        .HasColumnType("int");

                    b.Property<int?>("TotalMembers")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Linkshells");
                });

            modelBuilder.Entity("LinkshellManager.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterNameSender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("LinkshellManager.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterNameSender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("LinkshellManager.Models.Rule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LinkshellId")
                        .HasColumnType("int");

                    b.Property<string>("LinkshellName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuleDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuleTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LinkshellId");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("LinkshellManager.Models.Tod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Claim")
                        .HasColumnType("bit");

                    b.Property<string>("Cooldown")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DayNumber")
                        .HasColumnType("int");

                    b.Property<string>("Interval")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LinkshellId")
                        .HasColumnType("int");

                    b.Property<string>("MonsterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RepopTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TotalClaims")
                        .HasColumnType("int");

                    b.Property<int?>("TotalTods")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LinkshellId");

                    b.ToTable("Tods");
                });

            modelBuilder.Entity("LinkshellManager.Models.TodLootDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemWinner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TodId")
                        .HasColumnType("int");

                    b.Property<int?>("WinningDkpSpent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TodId");

                    b.ToTable("TodLootDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LinkshellManager.Models.Announcement", b =>
                {
                    b.HasOne("LinkshellManager.Models.Linkshell", "Linkshell")
                        .WithMany("Announcements")
                        .HasForeignKey("LinkshellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Linkshell");
                });

            modelBuilder.Entity("LinkshellManager.Models.AppUserEvent", b =>
                {
                    b.HasOne("LinkshellManager.Models.AppUser", "AppUser")
                        .WithMany("AppUserEvents")
                        .HasForeignKey("AppUserId");

                    b.HasOne("LinkshellManager.Models.Event", "Event")
                        .WithMany("AppUserEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkshellManager.Models.Linkshell", null)
                        .WithMany("AppUserEvents")
                        .HasForeignKey("LinkshellId");

                    b.Navigation("AppUser");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("LinkshellManager.Models.AppUserEventHistory", b =>
                {
                    b.HasOne("LinkshellManager.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("LinkshellManager.Models.EventHistory", "EventHistory")
                        .WithMany("AppUserEventHistories")
                        .HasForeignKey("EventHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("EventHistory");
                });

            modelBuilder.Entity("LinkshellManager.Models.AppUserJob", b =>
                {
                    b.HasOne("LinkshellManager.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("LinkshellManager.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("LinkshellManager.Models.AppUserLinkshell", b =>
                {
                    b.HasOne("LinkshellManager.Models.AppUser", "AppUser")
                        .WithMany("AppUserLinkshells")
                        .HasForeignKey("AppUserId");

                    b.HasOne("LinkshellManager.Models.Linkshell", "Linkshell")
                        .WithMany("AppUserLinkshells")
                        .HasForeignKey("LinkshellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Linkshell");
                });

            modelBuilder.Entity("LinkshellManager.Models.AppUserMessage", b =>
                {
                    b.HasOne("LinkshellManager.Models.AppUser", "AppUser")
                        .WithMany("AppUserMessages")
                        .HasForeignKey("AppUserId");

                    b.HasOne("LinkshellManager.Models.Message", "Message")
                        .WithMany("AppUserMessages")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("LinkshellManager.Models.Auction", b =>
                {
                    b.HasOne("LinkshellManager.Models.Linkshell", "Linkshell")
                        .WithMany("Auctions")
                        .HasForeignKey("LinkshellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Linkshell");
                });

            modelBuilder.Entity("LinkshellManager.Models.AuctionHistory", b =>
                {
                    b.HasOne("LinkshellManager.Models.Linkshell", "Linkshell")
                        .WithMany()
                        .HasForeignKey("LinkshellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Linkshell");
                });

            modelBuilder.Entity("LinkshellManager.Models.AuctionItem", b =>
                {
                    b.HasOne("LinkshellManager.Models.AuctionHistory", null)
                        .WithMany("AuctionItems")
                        .HasForeignKey("AuctionHistoryId");

                    b.HasOne("LinkshellManager.Models.Auction", "Auction")
                        .WithMany("AuctionItems")
                        .HasForeignKey("AuctionId");

                    b.Navigation("Auction");
                });

            modelBuilder.Entity("LinkshellManager.Models.Bid", b =>
                {
                    b.HasOne("LinkshellManager.Models.AuctionItem", "AuctionItem")
                        .WithMany("Bids")
                        .HasForeignKey("AuctionItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuctionItem");
                });

            modelBuilder.Entity("LinkshellManager.Models.DkpAudit", b =>
                {
                    b.HasOne("LinkshellManager.Models.AppUserLinkshell", "AppUserLinkshell")
                        .WithMany("DkpAudits")
                        .HasForeignKey("AppUserLinkshellId");

                    b.Navigation("AppUserLinkshell");
                });

            modelBuilder.Entity("LinkshellManager.Models.DkpLedger", b =>
                {
                    b.HasOne("LinkshellManager.Models.AppUserLinkshell", "AppUserLinkshell")
                        .WithMany("DkpLedgers")
                        .HasForeignKey("AppUserLinkshellId");

                    b.Navigation("AppUserLinkshell");
                });

            modelBuilder.Entity("LinkshellManager.Models.Event", b =>
                {
                    b.HasOne("LinkshellManager.Models.Linkshell", "Linkshell")
                        .WithMany("Events")
                        .HasForeignKey("LinkshellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Linkshell");
                });

            modelBuilder.Entity("LinkshellManager.Models.EventHistory", b =>
                {
                    b.HasOne("LinkshellManager.Models.Linkshell", "Linkshell")
                        .WithMany("EventHistories")
                        .HasForeignKey("LinkshellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Linkshell");
                });

            modelBuilder.Entity("LinkshellManager.Models.EventLootDetail", b =>
                {
                    b.HasOne("LinkshellManager.Models.Event", "Event")
                        .WithMany("EventLootDetails")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("LinkshellManager.Models.Income", b =>
                {
                    b.HasOne("LinkshellManager.Models.Linkshell", "Linkshell")
                        .WithMany("Incomes")
                        .HasForeignKey("LinkshellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Linkshell");
                });

            modelBuilder.Entity("LinkshellManager.Models.Invite", b =>
                {
                    b.HasOne("LinkshellManager.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkshellManager.Models.Linkshell", "Linkshell")
                        .WithMany()
                        .HasForeignKey("LinkshellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Linkshell");
                });

            modelBuilder.Entity("LinkshellManager.Models.Item", b =>
                {
                    b.HasOne("LinkshellManager.Models.Linkshell", "Linkshell")
                        .WithMany("Items")
                        .HasForeignKey("LinkshellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Linkshell");
                });

            modelBuilder.Entity("LinkshellManager.Models.Job", b =>
                {
                    b.HasOne("LinkshellManager.Models.Event", "Event")
                        .WithMany("Jobs")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("LinkshellManager.Models.Linkshell", b =>
                {
                    b.HasOne("LinkshellManager.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("LinkshellManager.Models.Message", b =>
                {
                    b.HasOne("LinkshellManager.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("LinkshellManager.Models.Notification", b =>
                {
                    b.HasOne("LinkshellManager.Models.AppUser", "AppUser")
                        .WithMany("Notifications")
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("LinkshellManager.Models.Rule", b =>
                {
                    b.HasOne("LinkshellManager.Models.Linkshell", "Linkshell")
                        .WithMany("Rules")
                        .HasForeignKey("LinkshellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Linkshell");
                });

            modelBuilder.Entity("LinkshellManager.Models.Tod", b =>
                {
                    b.HasOne("LinkshellManager.Models.Linkshell", "Linkshell")
                        .WithMany("Tods")
                        .HasForeignKey("LinkshellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Linkshell");
                });

            modelBuilder.Entity("LinkshellManager.Models.TodLootDetail", b =>
                {
                    b.HasOne("LinkshellManager.Models.Tod", "Tod")
                        .WithMany("TodLootDetails")
                        .HasForeignKey("TodId");

                    b.Navigation("Tod");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LinkshellManager.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LinkshellManager.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkshellManager.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LinkshellManager.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LinkshellManager.Models.AppUser", b =>
                {
                    b.Navigation("AppUserEvents");

                    b.Navigation("AppUserLinkshells");

                    b.Navigation("AppUserMessages");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("LinkshellManager.Models.AppUserLinkshell", b =>
                {
                    b.Navigation("DkpAudits");

                    b.Navigation("DkpLedgers");
                });

            modelBuilder.Entity("LinkshellManager.Models.Auction", b =>
                {
                    b.Navigation("AuctionItems");
                });

            modelBuilder.Entity("LinkshellManager.Models.AuctionHistory", b =>
                {
                    b.Navigation("AuctionItems");
                });

            modelBuilder.Entity("LinkshellManager.Models.AuctionItem", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("LinkshellManager.Models.Event", b =>
                {
                    b.Navigation("AppUserEvents");

                    b.Navigation("EventLootDetails");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("LinkshellManager.Models.EventHistory", b =>
                {
                    b.Navigation("AppUserEventHistories");
                });

            modelBuilder.Entity("LinkshellManager.Models.Linkshell", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("AppUserEvents");

                    b.Navigation("AppUserLinkshells");

                    b.Navigation("Auctions");

                    b.Navigation("EventHistories");

                    b.Navigation("Events");

                    b.Navigation("Incomes");

                    b.Navigation("Items");

                    b.Navigation("Rules");

                    b.Navigation("Tods");
                });

            modelBuilder.Entity("LinkshellManager.Models.Message", b =>
                {
                    b.Navigation("AppUserMessages");
                });

            modelBuilder.Entity("LinkshellManager.Models.Tod", b =>
                {
                    b.Navigation("TodLootDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
